/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.10/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java'
    id 'java-library'
    id 'maven-publish'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    testImplementation 'org.assertj:assertj-core:3.25.3'
    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
    testLogging {
        events "PASSED", "SKIPPED", "FAILED", "STANDARD_OUT", "STANDARD_ERROR"
    }
}

// Append to `lib/build.gradle`
def rustBasePath = ".."

//  execute cargo metadata and get path to target directory
/*

tasks.create(name: "cargo-output-dir", description: "Get cargo metadata") {
    exec {
        commandLine 'cargo', 'metadata', '--format-version', '1'
        workingDir rustBasePath
    }
}

 */

tasks.create(name: "print-path-env", description: "Print PATH environment variable") {
    doLast {
        def output = new ByteArrayOutputStream()
        exec {
            commandLine 'sh', '-c', 'printenv PATH' // Use 'cmd', '/c', 'set PATH' on Windows
            standardOutput = output
        }
        println output.toString()
    }
}