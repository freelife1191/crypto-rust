def libname = "crypto-core"
def defaultVersion = '0.0.1.RC1'

// -Pversion=0.0.1.RC1
// 명령줄 버전 값 확인 (findProperty 사용)
def inputVersion = project.findProperty('version')
// 입력된 버전 값이 있으면 사용, 없으면 기본값 사용
if (inputVersion != null && inputVersion != 'unspecified') {
    project.version = inputVersion
} else {
    project.version = defaultVersion
}
// -PjavaVersion=8
def javaVersion = project.findProperty("javaVersion") ?: ""
println("Project Version: ${project.version}, Java Version: ${javaVersion}")
// archivesBaseName = "crypto" + suffix
// println("📦 Building JAR: ${archivesBaseName}.jar")

// JAVA 버전 확인
// javap -verbose -cp lib.jar com/freelife/crypto/core/CryptoSession | grep "major\|minor"
def minorVersion = javaVersion == "8" ? 8 : 11
def majorVersion = javaVersion == "8" ? 8 : 21  // JDK 8을 명시하면 8로 설정

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(majorVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (javaVersion == "8") {
        // JDK 8로 컴파일 설정
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
        options.compilerArgs = ['-source', '1.8', '-target', '1.8']
    } else {
        options.release.set(minorVersion) // 최소 실행 가능 버전 설정
    }
}

println("Compiling with minor Java version: ${minorVersion}")
println("Compiling with major Java version: ${majorVersion}")

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
    testLogging {
        events "PASSED", "SKIPPED", "FAILED", "STANDARD_OUT", "STANDARD_ERROR"
    }
}

// Append to `lib/build.gradle`
// def rustBasePath = ".."
// def rustBasePath = project.projectDir // 현재 프로젝트 경로
def rustBasePath = rootProject.projectDir // 현재 프로젝트 경로

/*
//  execute cargo metadata and get path to target directory
tasks.create(name: "cargo-output-dir", description: "Get cargo metadata") {
    new ByteArrayOutputStream().withStream { os ->
        exec {
            commandLine 'cargo', 'metadata', '--format-version', '1'
            workingDir rustBasePath
            standardOutput = os
        }
        def outputAsString = os.toString()
        def json = new groovy.json.JsonSlurper().parseText(outputAsString)
        println("gradle build directory: ${project.buildDir}") //  /Users/user/company/crypto/crypto-rust/crypto-build/build
        println("rustBasePath: ${rustBasePath}") //  /Users/user/company/crypto/crypto-rust/crypto-build
        println("cargo root: ${json.workspace_root}") //  /Users/freelife/company/crypto/crypto-rust
        println("rootProject.projectDir: ${rootProject.projectDir}") //  /Users/freelife/company/crypto/crypto-rust
        //logger.info("cargo target directory: ${json.target_directory}")
        project.ext.cargo_target_directory = "$rustBasePath/target"
        println("cargo target directory: ${project.ext.cargo_target_directory}")
    }
}
 */

tasks.create(name: "print-path-env", description: "Print PATH environment variable") {
    doLast {
        def output = new ByteArrayOutputStream()
        exec {
            commandLine 'sh', '-c', 'printenv PATH' // Use 'cmd', '/c', 'set PATH' on Windows
            standardOutput = output
        }
        println output.toString()
    }
}