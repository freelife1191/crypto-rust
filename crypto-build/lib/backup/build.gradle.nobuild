def javaVersion = project.findProperty("javaVersion") ?: ""
// archivesBaseName = "enigma" + suffix
// println("📦 Building JAR: ${archivesBaseName}.jar")

// JAVA 버전 확인
// javap -verbose -cp lib.jar com/freelife/crypto/core/CryptoSession | grep "major\|minor"
def minorVersion = javaVersion == "8" ? 8 : 11
def majorVersion = javaVersion == "8" ? 8 : 21  // JDK 8을 명시하면 8로 설정

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(majorVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (javaVersion == "8") {
        // JDK 8로 컴파일 설정
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
        options.compilerArgs = ['-source', '1.8', '-target', '1.8']
    } else {
        options.release.set(minorVersion) // 최소 실행 가능 버전 설정
    }
}

println("Compiling with minor Java version: ${minorVersion}")
println("Compiling with major Java version: ${majorVersion}")

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
    testLogging {
        events "PASSED", "SKIPPED", "FAILED", "STANDARD_OUT", "STANDARD_ERROR"
    }
}

// Append to `lib/build.gradle`
// def rustBasePath = ".."
// def rustBasePath = project.projectDir // 현재 프로젝트 경로
def rustBasePath = rootProject.projectDir // 현재 프로젝트 경로

//  execute cargo metadata and get path to target directory
tasks.create(name: "cargo-output-dir", description: "Get cargo metadata") {
    new ByteArrayOutputStream().withStream { os ->
        exec {
            commandLine 'cargo', 'metadata', '--format-version', '1'
            workingDir rustBasePath
            standardOutput = os
        }
        def outputAsString = os.toString()
        def json = new groovy.json.JsonSlurper().parseText(outputAsString)
        println("gradle build directory: ${project.buildDir}") //  /Users/user/company/crypto/crypto-rust/crypto-build/build
        println("rustBasePath: ${rustBasePath}") //  /Users/user/company/crypto/crypto-rust/crypto-build
        println("cargo root: ${json.workspace_root}") //  /Users/freelife/company/crypto/crypto-rust
        println("rootProject.projectDir: ${rootProject.projectDir}") //  /Users/freelife/company/crypto/crypto-rust
        //logger.info("cargo target directory: ${json.target_directory}")
        project.ext.cargo_target_directory = "$rustBasePath/target"
        println("cargo target directory: ${project.ext.cargo_target_directory}")
    }
}

tasks.create(name: "delete-rust-java", type: Delete, dependsOn: "cargo-output-dir") {
    println "delete-rust-java"
    delete fileTree(dir: 'src/main/java/com/freelife/crypto/core', include: 'CryptoSession.java') // 원하는 경로와 파일 확장자로 변경
}

// -PjavaVersion=8
tasks.create(name: "native-java-change", type: Copy, dependsOn: "delete-rust-java") {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    println "native-java-change"
    //def envVar = System.getenv('JAVA_VERSION')
    def sourcePaths = []
    if (javaVersion == '8') {
        sourcePaths = ['copy/version8', 'copy/common']
    } else {
        sourcePaths = ['copy/other', 'copy/common']
    }
    // 여러 경로의 파일을 복사
    sourcePaths.each { sourcePath ->
        from sourcePath // 복사할 파일이 있는 경로
    }
    into 'src/main/java/com/freelife/crypto/core' // 파일을 복사할 대상 경로
    include '**/*.java' // 복사할 파일의 확장자
}

tasks.named('processResources') {
    dependsOn tasks.named('cargo-output-dir')
    dependsOn tasks.named('delete-rust-java')
    dependsOn tasks.named('native-java-change')
}

tasks.named('compileJava') {
    dependsOn tasks.named('native-java-change')
}

tasks.withType(Jar) {
    dependsOn tasks.named('native-java-change')
}

sourceSets {
    main {
        java {
            setSrcDirs(['src/main/java'])
        }
        resources {
            setSrcDirs(['src/main/resources', 'rust-lib'])
        }
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
          mavenJava(MavenPublication) {
              groupId = 'com.freelife.crypto'
              def baseArtifactId = 'crypto-core'
              def suffix = project.hasProperty('javaVersion') ? "-jdk${project.javaVersion}" : ''
              artifactId = baseArtifactId + suffix
              version = '0.0.1.RC1'
              from components.java

              pom {
                  name = "CryptoSession"
                  description = "Crypto Session Database Encryption/Decryption Library"
                  url = "https://github.com/freelife1191/crypto-rust"
                  licenses {
                      license {
                          name = 'The Apache License, Version 2.0'
                          url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                      }
                  }
                  developers {
                      developer {
                          id = "freelife"
                          name = "Free Life"
                          email = "freelife@gmail.com"
                      }
                  }
                  scm {
                      connection = "scm:git:git://github.com/freelife1191/crypto-rust.git"
                      developerConnection = "scm:git:ssh://github.com/freelife1191/crypto-rust.git"
                      url = "https://github.com/freelife1191/crypto-rust"
                  }
              }
          }
    }
    repositories {
        maven {
            name 'maven'
            url 's3://crypto-dev-repo'
            credentials(AwsCredentials) {
                accessKey 'AXXXXXXXXXXXXXXXXXXX'
                secretKey '53gXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
            }
        }
    }
}