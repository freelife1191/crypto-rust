/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.10/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java'
    id 'java-library'
    id 'maven-publish'
    //id 'signing'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    //flatDir { dirs 'crypto' }
}

dependencies {
    //implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.2'
    //implementation 'com.fasterxml.jackson.core:jackson-core:2.17.2'
    //implementation 'com.fasterxml.jackson.core:jackson-annotations:2.17.2'
    //implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.17.2'
    //implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.17.2'
    //implementation files("crypto/config.json")

    testImplementation 'org.assertj:assertj-core:3.25.3'

    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    //api libs.commons.math3

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    //implementation libs.guava
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
    testLogging {
        events "PASSED", "SKIPPED", "FAILED", "STANDARD_OUT", "STANDARD_ERROR"
    }
}

// Append to `lib/build.gradle`
def rustBasePath = ".."

//  execute cargo metadata and get path to target directory
tasks.create(name: "cargo-output-dir", description: "Get cargo metadata") {
    new ByteArrayOutputStream().withStream { os ->
        exec {
            commandLine 'cargo', 'metadata', '--format-version', '1'
            workingDir rustBasePath
            standardOutput = os
        }
        def outputAsString = os.toString()
        def json = new groovy.json.JsonSlurper().parseText(outputAsString)

        logger.info("cargo target directory: ${json.target_directory}")
        project.ext.cargo_target_directory = json.target_directory
    }
}

// Build with cargo
tasks.create(name: "cargo-build", type: Exec, description: "Running Cargo build", dependsOn: "cargo-output-dir") {
    workingDir rustBasePath
    commandLine 'cargo', 'build', '--release'

    doLast {
        //println "PATH Environment Variable: ${System.getenv('PATH')}"
        //println "Environment Variables:"
        //environment.each { key, value ->
        //    println "$key = $value"
        //}

        println "Executing command: cross build --target x86_64-pc-windows-gnu --release"
        exec {
            workingDir rustBasePath
            environment 'CROSS_CONTAINER_ENGINE', 'podman'
            environment 'CROSS_CONTAINER_ENGINE_NO_BUILDKIT', '1'
            commandLine 'cross', 'build', '--target', 'x86_64-pc-windows-gnu', '--release'
        }
        println "Executing command: cross build --target x86_64-unknown-linux-gnu --release"
        exec {
            workingDir rustBasePath
            environment 'CROSS_CONTAINER_ENGINE', 'podman'
            environment 'CROSS_CONTAINER_ENGINE_NO_BUILDKIT', '1'
            commandLine 'cross', 'build', '--target', 'x86_64-unknown-linux-gnu', '--release'
        }
        println "Executing command: cross build --target aarch64-unknown-linux-gnu --release"
        exec {
            workingDir rustBasePath
            environment 'CROSS_CONTAINER_ENGINE', 'podman'
            environment 'CROSS_CONTAINER_ENGINE_NO_BUILDKIT', '1'
            commandLine 'cross', 'build', '--target', 'aarch64-unknown-linux-gnu', '--release'
        }
    }
}


tasks.create(name: "rust-deploy", type: Sync, dependsOn: "cargo-build") {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    def lib_home = "rust-lib"
    // Define a common rename function
    def commonRename = { String fileName ->
        def nameWithoutExtension = fileName.lastIndexOf('.').with { it != -1 ? fileName[0..<it] : fileName }
        def extension = fileName.lastIndexOf('.').with { it != -1 ? fileName[it..-1] : '' }
        return "crypto${extension}"
    }
    destinationDir = file("$lib_home")

    include "*.dylib","*.so","*.dll"
    from("${project.ext.cargo_target_directory}/release") {
        //rename { fileName -> "lib"+commonRename(fileName) }
        //include "*.dylib","*.so","*.dll"
        into "lib/macosx/aarch64"
    }
    from("${project.ext.cargo_target_directory}/x86_64-pc-windows-gnu/release") {
        //rename commonRename
        //include "*.dylib","*.so","*.dll"
        into "lib/windows/amd64"
    }
    from("${project.ext.cargo_target_directory}/x86_64-unknown-linux-gnu/release") {
        //rename { fileName -> "lib"+commonRename(fileName) }
        //include "*.dylib","*.so","*.dll"
        into "lib/linux/amd64"
    }
    from("${project.ext.cargo_target_directory}/aarch64-unknown-linux-gnu/release") {
        //rename { fileName -> "lib"+commonRename(fileName) }
        //include "*.dylib","*.so","*.dll"
        into "lib/linux/aarch64"
    }
}

tasks.create(name: "delete-rust-java", type: Delete, dependsOn: "rust-deploy") {
// tasks.create(name: "delete-rust-java", type: Delete) {
    println "delete-rust-java"
    def javaVersion = project.findProperty('javaVersion') ?: 'defaultValue'
    delete fileTree(dir: 'src/main/java/com/freelife/crypto/core', include: 'CryptoSession.java') // 원하는 경로와 파일 확장자로 변경
}

// -PjavaVersion=1.8
// tasks.create(name: "native-java-change", dependsOn: "rust-deploy") {
tasks.create(name: "native-java-change", type: Sync, dependsOn: "delete-rust-java") {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    println "native-java-change"
    def javaVersion = project.findProperty('javaVersion') ?: 'defaultValue'
    //def envVar = System.getenv('JAVA_VERSION')
    def sourcePath
    if (javaVersion == '1.8') {
        //from 'copy/version_1_8'
        sourcePath = 'copy/version_1_8'
    } else {
        //from 'copy/other'
        sourcePath = 'copy/other'
    }
    // 특정 경로의 파일을 복사
    copy {
        from sourcePath // 복사할 파일이 있는 경로
        into 'src/main/java/com/freelife/crypto/core' // 파일을 복사할 대상 경로
        include '**/*.java' // 복사할 파일의 확장자
    }
}

tasks.named('processResources') {
    dependsOn tasks.named('cargo-output-dir')
    dependsOn tasks.named('cargo-build')
    dependsOn tasks.named('rust-deploy')
    dependsOn tasks.named('delete-rust-java')
    dependsOn tasks.named('native-java-change')
}


// Hook up tasks to execute before building java
tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn "rust-deploy"
}

// Hook up clean tasks
// tasks.create(name: "clean-rust", type: Delete, description: "Deleting built libs", dependsOn: "cargo-output-dir") {
//     delete fileTree(dir: "${project.ext.cargo_target_directory}")
// }
// clean.dependsOn "clean-rust"


// 삭제 참고
// delete fileTree("${project.ext.cargo_target_directory}/release") {
//    include "*.dylib","*.so","*.dll"
// }


sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources', 'rust-lib']
        }
    }
}

/*
task getAuthToken(type: Exec) {
    commandLine 'aws', 'codeartifact', 'get-authorization-token', '--domain', 'crypto-dev-repo', '--domain-owner', '123456789012', '--profile', 'session', '--region', 'ap-northeast-1', '--query', 'authorizationToken', '--output', 'text'
    standardOutput = new ByteArrayOutputStream()
    doLast {
        def authToken = standardOutput.toString().trim()
        project.ext.CODEARTIFACT_AUTH_TOKEN = authToken
        //println "CODEARTIFACT_AUTH_TOKEN: ${authToken}"
    }
}

tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn getAuthToken
}
*/

/*
task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

tasks.named('sourcesJar') {
    dependsOn tasks.named('rust-deploy')
}
*/

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
          mavenJava(MavenPublication) {
              groupId = 'com.freelife.crypto'
              def baseArtifactId = 'crypto-core'
              def suffix = project.hasProperty('javaVersion') ? "-jdk${project.javaVersion}" : ''
              artifactId = baseArtifactId + suffix
              version = '0.0.1.RC1'
              from components.java

              pom {
                  name = "CryptoSession"
                  description = "Crypto Session Database Encryption/Decryption Library"
                  url = "https://github.com/freelife1191/crypto-rust"
                  licenses {
                      license {
                          name = 'The Apache License, Version 2.0'
                          url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                      }
                  }
                  developers {
                      developer {
                          id = "freelife"
                          name = "Free Life"
                          email = "freelife@gmail.com"
                      }
                  }
                  scm {
                      connection = "scm:git:git://github.com/freelife1191/crypto-rust.git"
                      developerConnection = "scm:git:ssh://github.com/freelife1191/crypto-rust.git"
                      url = "https://github.com/freelife1191/crypto-rust"
                  }
              }
          }
    }
    repositories {
        maven {
            name 'maven'
            url 's3://crypto-dev-repo'
            credentials(AwsCredentials) {
                accessKey 'AXXXXXXXXXXXXXXXXXXX'
                secretKey '53gXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
            }
        }
    }
}


// signing {
//     sign publishing.publications.mavenJava
// }
//}