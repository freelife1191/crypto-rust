def libname = "crypto-core"
def defaultVersion = '0.1.0.RC1'

// -Pversion=0.1.0.RC1
// 명령줄 버전 값 확인 (findProperty 사용)
def inputVersion = project.findProperty('version')
// 입력된 버전 값이 있으면 사용, 없으면 기본값 사용
if (inputVersion != null && inputVersion != 'unspecified') {
    project.version = inputVersion
} else {
    project.version = defaultVersion
}
// -PjavaVersion=8
def javaVersion = project.findProperty("javaVersion") ?: ""
println("Project Version: ${project.version}, Java Version: ${javaVersion}")
// archivesBaseName = "crypto" + suffix
// println("📦 Building JAR: ${archivesBaseName}.jar")

// JAVA 버전 확인
// javap -verbose -cp lib.jar com/freelife/crypto/core/CryptoSession | grep "major\|minor"
def minorVersion = javaVersion == "8" ? 8 : 11
def majorVersion = javaVersion == "8" ? 8 : 21  // JDK 8을 명시하면 8로 설정

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(majorVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (javaVersion == "8") {
        // JDK 8로 컴파일 설정
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
        options.compilerArgs = ['-source', '1.8', '-target', '1.8']
    } else {
        options.release.set(minorVersion) // 최소 실행 가능 버전 설정
    }
}

println("Compiling with minor Java version: ${minorVersion}")
println("Compiling with major Java version: ${majorVersion}")

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
    testLogging {
        events "PASSED", "SKIPPED", "FAILED", "STANDARD_OUT", "STANDARD_ERROR"
    }
}

// Append to `lib/build.gradle`
// def rustBasePath = ".."
// def rustBasePath = project.projectDir // 현재 프로젝트 경로
def rustBasePath = rootProject.projectDir // 현재 프로젝트 경로

// 1. ExecOperations 주입 인터페이스 생성
interface ExecInjector {
    @Inject
    ExecOperations getExecOps()
}

//  execute cargo metadata and get path to target directory
tasks.create(name: "cargo-output-dir", description: "Get cargo metadata") {
    def execInjector = project.objects.newInstance(ExecInjector)
    def execOps = execInjector.execOps
    new ByteArrayOutputStream().withStream { os ->
        execOps.exec {
            commandLine 'cargo', 'metadata', '--format-version', '1'
            workingDir rustBasePath
            standardOutput = os
        }
        def outputAsString = os.toString()
        def json = new groovy.json.JsonSlurper().parseText(outputAsString)
        println("gradle build directory: ${project.buildDir}") //  /Users/user/company/crypto/crypto-rust/crypto-build/build
        println("rustBasePath: ${rustBasePath}") //  /Users/user/company/crypto/crypto-rust/crypto-build
        println("cargo root: ${json.workspace_root}") //  /Users/freelife/company/crypto/crypto-rust
        println("rootProject.projectDir: ${rootProject.projectDir}") //  /Users/freelife/company/crypto/crypto-rust
        //logger.info("cargo target directory: ${json.target_directory}")
        project.ext.cargo_target_directory = "$rustBasePath/target"
        println("cargo target directory: ${project.ext.cargo_target_directory}")
    }
}

tasks.create(name: "delete-rust-java", type: Delete, dependsOn: "cargo-output-dir") {
    println "delete-rust-java"
    delete fileTree(dir: 'src/main/java/com/freelife/crypto/core', include: 'CryptoSession.java') // 원하는 경로와 파일 확장자로 변경
}

// -PjavaVersion=8
tasks.create(name: "native-java-change", type: Copy, dependsOn: "delete-rust-java") {
    def commonDir = layout.projectDirectory.dir('copy/common')
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    println "native-java-change"
    //def envVar = System.getenv('JAVA_VERSION')
    def sourcePaths = []
    if (javaVersion == '8') {
        //sourcePaths = ['copy/version_1_8', 'copy/common']
        from layout.projectDirectory.dir('copy/version8')
    } else {
        // sourcePaths = ['copy/other', 'copy/common']
        from layout.projectDirectory.dir('copy/other')
    }
    // 여러 경로의 파일을 복사
    sourcePaths.each { sourcePath ->
        from sourcePath // 복사할 파일이 있는 경로
    }
    from commonDir
    //into 'src/main/java/com/freelife/crypto/core' // 파일을 복사할 대상 경로
    into layout.projectDirectory.dir('src/main/java/com/freelife/crypto/core') // 파일을 복사할 대상 경로
    include '**/*.java' // 복사할 파일의 확장자
}

tasks.named('processResources') {
    dependsOn tasks.named('cargo-output-dir')
    dependsOn tasks.named('delete-rust-java')
    dependsOn tasks.named('native-java-change')
}

tasks.named('compileJava') {
    dependsOn tasks.named('native-java-change')
}

tasks.withType(Jar) {
    dependsOn tasks.named('native-java-change')
    doLast {
        def jarFile = file("${buildDir}/libs/lib-${version}.jar")
        def outputDir = file("${rootProject.projectDir}/output")
        def libraryFilename = javaVersion == '8' ? "${libname}-jdk8-${version}.jar" : "${libname}-${version}.jar"
        def outputFile = file(libraryFilename)

        copy {
            from jarFile
            into outputDir
            rename { String fileName -> libraryFilename }
        }

        println("Copied ${jarFile} to ${outputFile}")
    }
}

sourceSets {
    main {
        java {
            setSrcDirs(['src/main/java'])
        }
        resources {
            setSrcDirs(['src/main/resources', 'rust-lib'])
        }
    }
}