def name = "crypto-core"
def defaultVersion = '0.0.1.RC1'

// -Pversion=0.0.1.RC1
// 명령줄 버전 값 확인 (findProperty 사용)
def inputVersion = project.findProperty('version')
// 입력된 버전 값이 있으면 사용, 없으면 기본값 사용
if (inputVersion != null && inputVersion != 'unspecified') {
    project.version = inputVersion
} else {
    project.version = defaultVersion
}
// -PjavaVersion=8
def javaVersion = project.findProperty("javaVersion") ?: ""
println("Project Version: ${project.version}, Java Version: ${javaVersion}")
// archivesBaseName = "crypto" + suffix
// println("📦 Building JAR: ${archivesBaseName}.jar")

// JAVA 버전 확인
// javap -verbose -cp lib.jar com/freelife/crypto/core/CryptoSession | grep "major\|minor"
def minorVersion = javaVersion == "8" ? 8 : 11
def majorVersion = javaVersion == "8" ? 8 : 21  // JDK 8을 명시하면 8로 설정

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(majorVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (javaVersion == "8") {
        // JDK 8로 컴파일 설정
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
        options.compilerArgs = ['-source', '1.8', '-target', '1.8']
    } else {
        options.release.set(minorVersion) // 최소 실행 가능 버전 설정
    }
}

println("Compiling with minor Java version: ${minorVersion}")
println("Compiling with major Java version: ${majorVersion}")

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
    testLogging {
        events "PASSED", "SKIPPED", "FAILED", "STANDARD_OUT", "STANDARD_ERROR"
    }
}

// Append to `lib/build.gradle`
// def rustBasePath = ".."
// def rustBasePath = project.projectDir // 현재 프로젝트 경로
def rustBasePath = rootProject.projectDir // 현재 프로젝트 경로

//  execute cargo metadata and get path to target directory
tasks.create(name: "cargo-output-dir", description: "Get cargo metadata") {
    new ByteArrayOutputStream().withStream { os ->
        exec {
            commandLine 'cargo', 'metadata', '--format-version', '1'
            workingDir rustBasePath
            standardOutput = os
        }
        def outputAsString = os.toString()
        def json = new groovy.json.JsonSlurper().parseText(outputAsString)
        println("gradle build directory: ${project.buildDir}") //  /Users/user/company/crypto/crypto-rust/crypto-build/build
        println("rustBasePath: ${rustBasePath}") //  /Users/user/company/crypto/crypto-rust/crypto-build
        println("cargo root: ${json.workspace_root}") //  /Users/freelife/company/crypto/crypto-rust
        println("rootProject.projectDir: ${rootProject.projectDir}") //  /Users/freelife/company/crypto/crypto-rust
        //logger.info("cargo target directory: ${json.target_directory}")
        project.ext.cargo_target_directory = "$rustBasePath/target"
        println("cargo target directory: ${project.ext.cargo_target_directory}")
    }
}

// Build with cargo
tasks.create(name: "cargo-build", type: Exec, description: "Running Cargo build", dependsOn: "cargo-output-dir") {
    workingDir rustBasePath
    environment 'CARGO_TARGET_DIR', 'target'
    commandLine 'cargo', 'build', '--release'

    println "Executing command: cross build --target x86_64-pc-windows-gnu --release"
    exec {
        workingDir rustBasePath
        environment 'CROSS_CONTAINER_ENGINE', 'podman'
        environment 'CROSS_CONTAINER_ENGINE_NO_BUILDKIT', '1'
        environment 'CROSS_CONFIG', "${rustBasePath}/Cross.toml"
        environment 'CARGO_TARGET_DIR', 'target'
        environment 'CARGO_BUILD_TARGET', 'x86_64-pc-windows-gnu'
        commandLine 'cross', 'build', '--release'
    }
    println "Executing command: cross build --target x86_64-unknown-linux-gnu --release"
    exec {
        workingDir rustBasePath
        environment 'CROSS_CONTAINER_ENGINE', 'podman'
        environment 'CROSS_CONTAINER_ENGINE_NO_BUILDKIT', '1'
        environment 'CROSS_CONFIG', "${rustBasePath}/Cross.toml"
        environment 'CARGO_TARGET_DIR', 'target'
        environment 'CARGO_BUILD_TARGET', 'x86_64-unknown-linux-gnu'
        commandLine 'cross', 'build', '--release'
        //commandLine 'sh' , '-c', 'rustup update && cross build --release'
    }
    println "Executing command: cross build --target aarch64-unknown-linux-gnu --release"
    exec {
        workingDir rustBasePath
        environment 'CROSS_CONTAINER_ENGINE', 'podman'
        environment 'CROSS_CONTAINER_ENGINE_NO_BUILDKIT', '1'
        environment 'CROSS_CONFIG', "${rustBasePath}/Cross.toml"
        environment 'CARGO_TARGET_DIR', 'target'
        environment 'CARGO_BUILD_TARGET', 'aarch64-unknown-linux-gnu'
        commandLine 'cross', 'build', '--release'
    }
}


tasks.create(name: "rust-deploy", type: Sync, dependsOn: "cargo-build") {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    def lib_home = "rust-lib"
    // Define a common rename function
    def commonRename = { String fileName ->
        def nameWithoutExtension = fileName.lastIndexOf('.').with { it != -1 ? fileName[0..<it] : fileName }
        def extension = fileName.lastIndexOf('.').with { it != -1 ? fileName[it..-1] : '' }
        return "crypto${extension}"
    }
    destinationDir = file("$lib_home")

    include "*.dylib","*.so","*.dll"
    from("${project.ext.cargo_target_directory}/release") {
        //rename { fileName -> "lib"+commonRename(fileName) }
        //include "*.dylib","*.so","*.dll"
        into "lib/macosx/aarch64"
    }
    from("${project.ext.cargo_target_directory}/x86_64-pc-windows-gnu/release") {
        //rename commonRename
        //include "*.dylib","*.so","*.dll"
        into "lib/windows/amd64"
    }
    from("${project.ext.cargo_target_directory}/x86_64-unknown-linux-gnu/release") {
        //rename { fileName -> "lib"+commonRename(fileName) }
        //include "*.dylib","*.so","*.dll"
        into "lib/linux/amd64"
    }
    from("${project.ext.cargo_target_directory}/aarch64-unknown-linux-gnu/release") {
        //rename { fileName -> "lib"+commonRename(fileName) }
        //include "*.dylib","*.so","*.dll"
        into "lib/linux/aarch64"
    }
}

tasks.create(name: "delete-rust-java", type: Delete, dependsOn: "rust-deploy") {
    println "delete-rust-java"
    delete fileTree(dir: 'src/main/java/com/freelife/crypto/core', include: 'CryptoSession.java') // 원하는 경로와 파일 확장자로 변경
}

// -PjavaVersion=8
tasks.create(name: "native-java-change", type: Copy, dependsOn: "delete-rust-java") {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    println "native-java-change"
    //def envVar = System.getenv('JAVA_VERSION')
    def sourcePaths = []
    if (javaVersion == '8') {
        sourcePaths = ['copy/version8', 'copy/common']
    } else {
        sourcePaths = ['copy/other', 'copy/common']
    }
    // 여러 경로의 파일을 복사
    sourcePaths.each { sourcePath ->
        from sourcePath // 복사할 파일이 있는 경로
    }
    into 'src/main/java/com/freelife/crypto/core' // 파일을 복사할 대상 경로
    include '**/*.java' // 복사할 파일의 확장자
}

tasks.named('processResources') {
    dependsOn tasks.named('cargo-output-dir')
    dependsOn tasks.named('cargo-build')
    dependsOn tasks.named('rust-deploy')
    dependsOn tasks.named('delete-rust-java')
    dependsOn tasks.named('native-java-change')
}


// Hook up tasks to execute before building java
tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn "rust-deploy"
}

// Hook up clean tasks
// tasks.create(name: "clean-rust", type: Delete, description: "Deleting built libs", dependsOn: "cargo-output-dir") {
//     delete fileTree(dir: "${project.ext.cargo_target_directory}")
// }
// clean.dependsOn "clean-rust"


// 삭제 참고
// delete fileTree("${project.ext.cargo_target_directory}/release") {
//    include "*.dylib","*.so","*.dll"
// }

tasks.named('compileJava') {
    dependsOn tasks.named('native-java-change')
}

tasks.withType(Jar) {
    dependsOn tasks.named('native-java-change')
    doLast {
        def jarFile = file("${buildDir}/libs/lib-${project.version}.jar")
        def outputDir = file("${rootProject.projectDir}/output")
        def libraryFilename = ""
        if (javaVersion == '8') {
            libraryFilename = "${outputDir}/${name}-jdk8-${project.version}.jar"
        } else {
            libraryFilename = "${outputDir}/${name}-${project.version}.jar"
        }
        def outputFile = file(libraryFilename)

        if (!outputDir.exists()) {
            outputDir.mkdirs()
        }

        copy {
            from jarFile
            into outputDir
            rename { String fileName -> libraryFilename }
        }

        println("Copied ${jarFile} to ${outputFile}")
    }
}

sourceSets {
    main {
        java {
            setSrcDirs(['src/main/java'])
        }
        resources {
            setSrcDirs(['src/main/resources', 'rust-lib'])
        }
    }
}