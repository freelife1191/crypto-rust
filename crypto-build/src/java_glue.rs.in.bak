foreign_class!(class CryptoCipherSpec {
    self_type CryptoCipherSpec;
    constructor CryptoCipherSpec::new(ky: &[u8], iv: &[u8]) -> CryptoCipherSpec;
});

foreign_class!(class CryptoConfig {
    self_type CryptoConfig;
    constructor CryptoConfig::new(key_iteration: i32, iv_iteration: i32) -> CryptoConfig;
});

foreign_class!(class CryptoSession {
    self_type CryptoSession;
    constructor CryptoSession::create(path: &Path) -> CryptoSession;
    constructor CryptoSession::of_config(config: JsonConfig) -> CryptoSession;
    fn CryptoSession::encrypt(&self, plaintext: String) -> String;
    fn CryptoSession::decrypt(&self, encrypted: String) -> String;
    fn CryptoSession::get_cipher_spec(config: CryptoConfig) -> CryptoCipherSpec; alias getCipherSpec;
});

foreign_class!(class CryptoConfig {
    self_type CryptoConfig;
    constructor CryptoConfig::new() -> CryptoConfig;
    constructor CryptoConfig::from_json_config(json_config: JsonConfig) -> CryptoConfig;
});

foreign_class!(class JsonConfig {
    self_type JsonConfig;
    constructor JsonConfig::new(aws_kms_key: String, access_key_id: String, secret_access_key: String, seed: String, credential: String) -> JsonConfig;
});

foreign_class!(class CryptoUtil {
    fn path_to_string(path: &Path) -> String; alias pathToString;
    fn path_to_json(path: &Path) -> JsonConfig; alias pathToJson;
    fn string_to_path(path: &str) -> String; alias stringToPath;
    foreign_code r#"
        static {
            try {
                NativeUtils.loadLibraryFromJar("/libcrypto_rust_lib_gradle.dylib"); // for macOS, make sure this is .dylib rather than .so
            } catch (java.io.IOException e) {
                e.printStackTrace();
            }
        }"#;
});

/*
foreign_class!(class CryptoCipherSpec {
    self_type CryptoCipherSpec;
    constructor CryptoCipherSpec::new(ky: Vec<u8>, iv: Vec<u8>) -> CryptoCipherSpec;
});
*/

/*
foreign_class!(class AwsKmsService {
    self_type AwsKmsService;
    constructor AwsKmsService::new() -> AwsKmsService;
    fn AwsKmsService::encrypt(plaintext: &[u8]) -> String;
    fn AwsKmsService::decrypt(ciphertext: &str) -> Vec<u8>;
});


foreign_enum!(
    enum Algorithm {
        AES128 = Algorithm::AES128,
        AES192 = Algorithm::AES192,
        AES256 = Algorithm::AES256,
    }
);

foreign_class!(class CryptoUtil {
    fn rand_bytes(length: usize) -> Vec<u8>; alias randBytes;
    fn digest(alg: &str, data: &[u8], count: usize) -> Vec<u8>;
    fn encrypt_aes_cbc(algorithm: Algorithm, data: &[u8], key: &[u8], iv: &[u8]) -> Vec<u8>;
    fn decrypt_aes_cbc(algorithm: Algorithm, data: &[u8], key: &[u8], iv: &[u8]) -> Vec<u8>;
    fn encrypt_aes_cbc_aes256(data: &[u8], key: &[u8], iv: &[u8]) -> Vec<u8>;
    fn decrypt_aes_cbc_aes256(data: &[u8], key: &[u8], iv: &[u8]) -> Vec<u8>;
    fn encode_base64(data: &[u8]) -> String;
    fn decode_base64(data: &str) -> Vec<u8>;
    foreign_code r#"
        static {
            try {
                NativeUtils.loadLibraryFromJar("/libcrypto_rust.dylib"); // for macOS, make sure this is .dylib rather than .so
            } catch (java.io.IOException e) {
                e.printStackTrace();
            }
        }"#;
});
*/


// Not sure how I feel about this but:
// https://github.com/Dushistov/flapigen-rs/issues/143#issuecomment-664131615
foreign_typemap!(
    ($p:r_type) Vec<u8> => jbyteArray {
        let slice = &($p)[..];
        let slice = unsafe { std::mem::transmute::<&[u8], &[i8]>(slice) };
        let raw = JavaByteArray::from_slice_to_raw(slice, env);
        $out = raw;
    };
    ($p:f_type) => "jbyteArray";
    ($p:r_type) Vec<u8> <= jbyteArray {
        let arr = JavaByteArray::new(env, $p);
        let slice = arr.to_slice();
        let slice = unsafe { std::mem::transmute::<&[i8], &[u8]>(slice) };
        $out = slice.to_vec();
    };
    ($p:f_type) <= "jbyteArray";
);